<?php

namespace Tests\Feature\Model;

use App\Models\Genre;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Str;
use Tests\TestCase;

/**
 * @group model
 * @group genre
 */
class GenreTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * @var Genre
     */
    private $genre;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->genre = new Genre();
    }

    public function testList()
    {
        factory(Genre::class, 10)->create();
        $genreegories = $this->genre->all();
        self::assertCount(10, $genreegories);
        $expected_genre_keys = ['id', 'name',  'is_active', 'created_at', 'updated_at', 'deleted_at'];
        $genre_keys = array_keys($genreegories->first()->getAttributes());
        self::assertEqualsCanonicalizing($expected_genre_keys, $genre_keys);
    }

    public function testCreate()
    {
        $genre = $this->genre->create(['name' => 'Teste 1']);
        self::assertEquals('Teste 1', $genre->name);
        $genre->refresh();
        self::assertEquals('Teste 1', $genre->name);
        $isUUID = preg_match('/[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i', $genre->id);
        self::assertEquals(1, $isUUID);
        self::assertTrue($genre->is_active);
        $genre_1 = $this->genre->create(['name' => 'Teste 2' ]);
        $genre_1->refresh();
        self::assertEquals('Teste 2', $genre_1->name);
        self::assertTrue($genre_1->is_active);
        $genre_2 = $this->genre->create(['name' => 'Teste 3',   'is_active' => true]);
        $genre_2->refresh();
        self::assertEquals('Teste 3', $genre_2->name);
        self::assertTrue($genre_2->is_active);
        $genre_3 = $this->genre->create(['name' => 'Teste 4',   'is_active' => false]);
        $genre_3->refresh();
        self::assertEquals('Teste 4', $genre_3->name);
        self::assertFalse($genre_3->is_active);
        $genre_4 = $this->genre->create(['name' => 'Teste 5',   'is_active' => false]);
        $genre_4->refresh();
        self::assertEquals('Teste 5', $genre_4->name);
        self::assertFalse($genre_4->is_active);
        $genre_5 = $this->genre->create(['name' => 'Teste 6',  'is_active' => false]);
        $genre_5->refresh();
        self::assertEquals('Teste 6', $genre_5->name);
        //@todo make sure empty strig return null
        self::assertFalse($genre_5->is_active);
    }

    public function testUpdate()
    {
        $genre = factory(Genre::class)->create();
        $genre->update(['name' => 'Teste 1',   'is_active' => false]);
        self::assertEquals('Teste 1', $genre->name);
        self::assertFalse($genre->is_active);
        $genre_2 = factory(Genre::class)->create();
        $genre_2->update(['is_active' => false]);
        self::assertFalse($genre_2->is_active);
        $genre_3 = factory(Genre::class)->create();
        $genre_3->update(['name' => 'Teste 3']);
        self::assertEquals('Teste 3', $genre_3->name);
    }

    public function testDelete()
    {
        $genre = factory(Genre::class)->create();
        self::assertCount(1, $this->genre->all());
        self::assertTrue($genre->delete());
        self::assertCount(0, $this->genre->all());
        self::assertCount(1, $this->genre->withTrashed()->get());
    }

    public function testFindFail()
    {
        $this->expectException(ModelNotFoundException::class);
        $this->genre->findOrFail(Str::uuid());
        $this->genre->find(Str::uuid());
    }
    public function testFind()
    {
        $uuid = Str::uuid();
        $genre = $this->genre->find($uuid);
        self::assertNull($genre);
        factory(Genre::class)->create(['id' => $uuid, 'name' => 'Teste 1']);
        $genre = $this->genre->find($uuid);
        self::assertInstanceOf(Genre::class, $genre);
    }
}
